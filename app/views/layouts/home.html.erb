<!DOCTYPE html>
<html>
<head>
  <title>PropertyChecklist</title>
  <%= stylesheet_link_tag    "application", :media => "all" %>
  <%= javascript_include_tag "application" %>
  <link href='http://fonts.googleapis.com/css?family=Noto+Sans' rel='stylesheet' type='text/css'>
  <%= csrf_meta_tags %>
  <style type="text/css">
  body {
  padding-top: 60px;
  padding-bottom: 40px;
  font-size: 16px;
  }
  p{
  font-size:  14px;
  font-weight: 200;
  }
  li{
      font-family: 'Noto Sans', sans-serif;
  }
  </style>
  <script type="text/javascript">
      (function ($) {
          var queryParser = function (a) {
              var i, p, b = {};
              if (a === "") {
                  return {};
              }
              for (i = 0; i < a.length; i += 1) {
                  p = a[i].split('=');
                  if (p.length === 2) {
                      b[p[0]] = decodeURIComponent(p[1].replace(/\+/g, " "));
                  }
              }
              return b;
          };
          $.queryParams = function () {
              return queryParser(window.location.search.substr(1).split('&'));
          };
          $.hashParams = function () {
              return queryParser(window.location.hash.substr(1).split('&'));
          };


          window.Swiftype = window.Swiftype || {};
          Swiftype.root_url = Swiftype.root_url || 'https://api.swiftype.com';
          Swiftype.pingUrl = function(endpoint, callback) {
              var to = setTimeout(callback, 350);
              var img = new Image();
              img.onload = img.onerror = function() {
                  clearTimeout(to);
                  callback();
              };
              img.src = endpoint;
              return false;
          };
          Swiftype.pingSearchResultClick = function (engineKey, docId, callback) {
              var params = {
                  t: new Date().getTime(),
                  engine_key: engineKey,
                  doc_id: docId,
                  q: Swiftype.currentQuery
              };
              var url = Swiftype.root_url + '/api/v1/public/analytics/pc?' + $.param(params);
              Swiftype.pingUrl(url, callback);
          };

          $.fn.swiftypeSearch = function (options) {
              var options = $.extend({}, $.fn.swiftypeSearch.defaults, options);

              return this.each(function () {
                  var $this = $(this);
                  var config = $.meta ? $.extend({}, options, $this.data()) : options;
                  $this.data('swiftype-config-search', config);

                  $this.selectedCallback = function (data) {
                      return function (e) {
                          var $el = $(this);
                          e.preventDefault();
                          Swiftype.pingSearchResultClick(config.engineKey, data['id'], function() {
                              window.location = $el.attr('href');
                          });
                      };
                  };

                  $this.registerResult = function ($element, data) {
                      $element.data('swiftype-item', data);
                      $('a', $element).click($this.selectedCallback(data));
                  };

                  $this.getContentCache = function () {
                      return $('#' + contentCacheId);
                  };

                  var $resultContainer = $(config.resultContainingElement),
                          initialContentOfResultContainer = $resultContainer.html(),
                          contentCacheId = 'st-content-cache',
                          $contentCache = $this.getContentCache();

                  var setSearchHash = function (query, page) {
                      location.hash = "stq=" + encodeURIComponent(query) + "&stp=" + page;
                  };

                  var submitSearch = function (query, options) {
                      options = $.extend({
                          page: 1
                      }, options);
                      var params = {};

                      if (!$contentCache.length) {
                          $resultContainer.after("<div id='" + contentCacheId + "' style='display: none;'></div>");
                          $contentCache.html(initialContentOfResultContainer).hide();
                      }
                      config.loadingFunction(query, $resultContainer);

                      Swiftype.currentQuery = query;
                      params['q'] = query;
                      params['engine_key'] = config.engineKey;
                      params['page'] = options.page;
                      params['per_page'] = config.perPage;

                      function handleFunctionParam(field) {
                          if (field !== undefined) {
                              var evald = field;
                              if (typeof evald === 'function') {
                                  evald = evald.call();
                              }
                              return evald;
                          }
                          return undefined;
                      }

                      params['search_fields'] = handleFunctionParam(config.searchFields);
                      params['fetch_fields'] = handleFunctionParam(config.fetchFields);
                      params['filters'] = handleFunctionParam(config.filters);
                      params['document_types'] = handleFunctionParam(config.documentTypes);
                      params['functional_boosts'] = handleFunctionParam(config.functionalBoosts);
                      params['sort_field'] = handleFunctionParam(config.sortField);
                      params['sort_direction'] = handleFunctionParam(config.sortDirection);

                      $.getJSON(Swiftype.root_url + "/api/v1/public/engines/search.json?callback=?", params).success(renderSearchResults);
                  };

                  $(window).hashchange(function () {
                      var params = $.hashParams();
                      if (params.stq) {
                          submitSearch(params.stq, {
                              page: params.stp
                          });
                      } else {
                          var $contentCache = $this.getContentCache();
                          if ($contentCache.length) {
                              $resultContainer.html($contentCache.html());
                              $contentCache.remove();
                          }
                      }
                  });

                  var $containingForm = $this.parents('form');
                  if ($containingForm) {
                      $containingForm.bind('submit', function (e) {
                          e.preventDefault();
                          var searchQuery = $this.val();
                          setSearchHash(searchQuery, 1);
                      });
                  }

                  $(document).on('click', '[data-hash][data-page]', function (e) {
                      e.preventDefault();
                      var $this = $(this);
                      setSearchHash($.hashParams().stq, $this.data('page'));
                  });

                  var renderSearchResults = function (data) {
                      if (typeof config.preRenderFunction === 'function') {
                          config.preRenderFunction.call($this, data);
                      }
                      config.renderResultsFunction($this.getContext(), data);
                  };

                  $this.getContext = function () {
                      return {
                          config: config,
                          resultContainer: $resultContainer,
                          registerResult: $this.registerResult
                      };
                  };

                  $(window).hashchange(); // if the swiftype query hash is present onload (maybe the user is pressing the back button), submit a query onload
              });
          };

          var renderPagination = function (ctx, resultInfo) {
              var maxPagesType, maxPages = -1;
              $.each(resultInfo, function(documentType, typeInfo) {
                  if (typeInfo.num_pages > maxPages) {
                      maxPagesType = documentType;
                      maxPages = typeInfo.num_pages;
                  }
              });
              var currentPage = resultInfo[maxPagesType].current_page,
                      totalPages = resultInfo[maxPagesType].num_pages;
              $(renderPaginationForType(maxPagesType, currentPage, totalPages)).appendTo(ctx.resultContainer);
          };

          var renderPaginationForType = function (type, currentPage, totalPages) {
              var pages = '<div class="st-page">',
                      previousPage, nextPage;
              if (currentPage != 1) {
                  previousPage = currentPage - 1;
                  pages = pages + '<a href="#" class="st-prev" data-hash="true" data-page="' + previousPage + '">&laquo; previous</a>';
              }
              if (currentPage < totalPages) {
                  nextPage = currentPage + 1;
                  pages = pages + '<a href="#" class="st-next" data-hash="true" data-page="' + nextPage + '">next &raquo;</a>';
              }
              pages += '</div>';
              return pages;
          };

          var normalize = function (str) {
              return $.trim(str).toLowerCase();
          };

          function htmlEscape(str) {
              return String(str).replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
          }

          var defaultRenderResultsFunction = function (ctx, data) {
              var $resultContainer = ctx.resultContainer,
                      config = ctx.config;

              $resultContainer.html('');

              $.each(data.records, function (documentType, items) {
                  $.each(items, function (idx, item) {
                      ctx.registerResult($(config.renderFunction(documentType, item)).appendTo($resultContainer), item);
                  });
              });

              renderPagination(ctx, data.info);
          };

          var defaultRenderFunction = function (document_type, item) {
              return '<div class="st-result"><h3 class="title"><a href="' + item['url'] + '" class="st-search-result-link">' + htmlEscape(item['title']) + '</a></h3></div>';
          };

          var defaultLoadingFunction = function(query, $resultContainer) {
              $resultContainer.html('<p class="st-loading-message">loading...</p>');
          };

          $.fn.swiftypeSearch.defaults = {
              attachTo: undefined,
              documentTypes: undefined,
              filters: undefined,
              engineKey: undefined,
              searchFields: undefined,
              functionalBoosts: undefined,
              sortField: undefined,
              sortDirection: undefined,
              fetchFields: undefined,
              preRenderFunction: undefined,
              loadingFunction: defaultLoadingFunction,
              renderResultsFunction: defaultRenderResultsFunction,
              renderFunction: defaultRenderFunction,
              perPage: 10
          };
      })(jQuery);
      /*===================================================================================*/

      $(document).ready(function() {
          var customRenderFunction = function(document_type, item) {
              var out = '<div class="st-result"><h3 class="title"><a href=" ' + item['ProjectUrl'] + ' " class="st-search-result-link">' + item['ProjectName'] + " by "+ item['ProjectDeveloper'] + " in " + item['ProjectCity']+ '</a>';
              return out
          };
          $("#projectSearchField").swiftypeSearch({
              renderFunction: customRenderFunction,
              engineKey: 'xjvyNV8YyuiDWevYpMcN',
              resultContainingElement: '#projects-results-container'
          });
      });
  </script>
</head>

<body>
<div class="navbar navbar-inverse navbar-fixed-top">
  <div class="navbar-inner">
    <div class="container">
      <button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="brand" href="hero.html">PropertyChecklist.in</a>
      <div class="nav-collapse collapse">
        <ul class="nav">
          <% if !session[:current_user_id].nil? %>
              <li> <%= link_to "Logout", {controller: "authentication", action: "logout" } %></li>
          <% end %>
        </ul>
      </div><!--/.nav-collapse -->
    </div>
  </div>
</div>

<div class="container">

  <!-- Main hero unit for a primary marketing message or call to action -->
  <div class="hero-unit">
    <h4>Hello, Everybody !</h4>
    <h4>We all know that buying property  is an extremely complex process in India, with<span class="label label-important"> no transparency at all.</span> End customers like you
    who don't have time and complete knowledge are taken for a ride by builders/developers.This site seeks to provide the following services to you</h4>
    <ul>
      <li><h5>A "must verify" checklist to check before buying property</h5></li>
      <li><h5>the checklist is shared among all buyers for a particular property, so you know what "other buyers" are saying about the property</h5></li>
      <li><h5>Get to know other members who are buying the property, and collaborate with them, right from the start</h5></li>
      <li><h5>Can demand for your rights as a group, better collaborate among yourselves </h5></li>
    </ul>
    <h4>It is very important to  collaborate among yourselves as a group, to clarify all the details, so go ahead</h4>
  </div>
  <div class="row">
      <div class="span7">
        <div class="well well-large">
          <%= yield :project_search %>
        </div>
      </div>
    </div>
  </div>
</body>
</html>